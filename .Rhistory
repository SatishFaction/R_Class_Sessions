print(x)
y<-10
print(x+y)
z<-x+y
print(z)
y=c(1:100)
y
#C. Generating regular sequences - The seq() function
seq(1,20,3)
#A. sum()
sum(y)
#B. mean(), median(), sd(), var()
mean(y)
median(y)
sd(y)
var(y)
#C. max(), min()
max(x)
x <- c(12,34,24,45,7,18)
max(x)
min(y)
#D. quantile()
quantile(y,0.5)
#D. quantile()
quantile(y,0.5,0.75)
#D. quantile()
quantile(y,c(0.5,0.75))
a=c(900,80,1,5,72,200)
#F. summary
summary(a)
length(a)
a>200
x > 20
a==1
(x>30 | x<10)
x
x <- c(33,45,23,67,54,48)
x
y <- c(108,151,164,119,135,122)
y
#Write a R code to find the folowing solutions
# a. Vaues of x that are less than 35
sum(x<35)
x <- c(33,45,23,67,54,48)
sum(x<35)
#Write a R code to find the folowing solutions
# a. Vaues of x that are less than 35
length(which(x<35))
length(which(y>150))
tabulate(x)
# c. The number of observations in y that are between 120 and 165
length(which(y>120&y<=165))
#R practise from Statistical Learning Book
#Creating a vector in R
x=c(1,2,3,4,5,40)
x
y=c(21,18,17,1,13,1)
length(y)
length(x)
z=x+y
z
ls()
rm(a)
ls()
#The Matrix function
M=matrix(x,nrow = 3,ncol = 3)
M
#The Matrix function
M=matrix(x,nrow = 2,ncol = 2)
M
N-matrix(y,3,2,byrow = TRUE)
N=matrix(y,3,2,byrow = TRUE)
N
#The sqrt function
sqrt(x)
sqrt(100)
#square root of matrix
ssqrt(M)
#square root of matrix
sqrt(M)
#square root of matrix
sqrt(N)
#the power operator
x^2
rnorm(20)
rnorm(20)
n=rnorm(20)
p=n+rnorm(50,mean = 50,sd = .1)
n=rnorm(50)
p=n+rnorm(50,mean = 50,sd = .1)
cor(n,p)
set.seed(123)
n=rnorm(50)
n
n=rnorm(50)
n
a=matrix(1,2,3,4)
a
?matrix
a=matrix(c(2,4,6,8))
a
a=matrix(c(2,4,6,8),byrow=T)
a
a=matrix(c(2,4,6,8),byrow=F)
a
a=matrix(c(2,4,6,8),byrow=T)
a
a=matrix(c(2,4,6,8),nrow = 2,ncol = 2,byrow=T)
a
a=matrix(c(2,4,6,8),nrow = 2,ncol = 2)
a
a=matrix(c("a","b","c","d"),nrow = 2,ncol = 2)
a
[1:5]
[1:5]
#Let x takes the value -5
x <- -5
if (x > 0)
print('success')
else
print('failure')
if(x > 0)
{
print("success")
}
Graphs <- function(data)
{
for(i in 1:ncol(data))
{
png(paste(names(data)[i], ".png", sep="")) #NOTE this step
par(mfrow=c(2,1))
boxplot(data[,i], main = paste("Boxplot of", names(data)[i]),
ylab = names(data)[i], col = "maroon", border = "grey5",
horizontal = T)
hist(data[,i], main = paste("Histogram of", names(data)[i]),
xlab = names(data)[i], ylab = "No. of Houses", col = "lightgreen", border=F)
dev.off()  #NOTE this step
}
}
Graphs(mtcars)
hello <- function()
{
print("Hello World")
}
hello()
library(astas)
library(astsa)
library(astsa)
library(astsa)
library(astsa)
install.packages("astas")
getwd()
Univariate_V_Plus_Cat_dir<-function(dat1,v=1:ncol(dat1),dir="C:\\Users\\ASUS\\Desktop\\R_Practise")
{
if(!is.data.frame(dat1))
{
stop("The input should be a data frame object")
}
s=getwd()
setwd(dir)
for(i in v)
{
if(is.numeric(dat1[,i]))
{
png(paste(names(dat1)[i],".png",sep = ""))
par(mfrow=c(2,1))
boxplot(dat1[,i],main=paste("BoxPlot of ",names(dat1)[i])
,xlab=names(dat1)[i],col = 'light green')
hist(dat1[,i],main = paste("Histogram of ",names(dat1)[i]),
xlab = names(dat1)[i],col = "maroon")
dev.off()
}
if(is.factor(dat1[,i]))
{
png(paste(names(dat1)[i],".png",sep = ""))
par(mfrow=c(1,1))
barplot(table(dat1[,i]),xlab = names(dat1)[i],col = "maroon")
dev.off()
}
}
Univariate_V_Plus_Cat_dir<-function(dat1,v=1:ncol(dat1),dir="C:\\Users\\ASUS\\Desktop\\R_Practise")
{
if(!is.data.frame(dat1))
{
stop("The input should be a data frame object")
}
s=getwd()
setwd(dir)
for(i in v)
{
if(is.numeric(dat1[,i]))
{
png(paste(names(dat1)[i],".png",sep = ""))
par(mfrow=c(2,1))
boxplot(dat1[,i],main=paste("BoxPlot of ",names(dat1)[i])
,xlab=names(dat1)[i],col = 'light green')
hist(dat1[,i],main = paste("Histogram of ",names(dat1)[i]),
xlab = names(dat1)[i],col = "maroon")
dev.off()
}
if(is.factor(dat1[,i]))
{
png(paste(names(dat1)[i],".png",sep = ""))
par(mfrow=c(1,1))
barplot(table(dat1[,i]),xlab = names(dat1)[i],col = "maroon")
dev.off()
}
}
setwd(s)
}
Univariate_V_Plus_Cat_dir(ibm,c(3,4))
p=matrix(c(1,2,3,4),nrow = 2,ncol = 2)
p
re_arrange<-function(data)
{
if(!is.data.frame(data))
{
stop("The input should be a data frame object")
}
for(i in 1:ncol(data))
{
M=matrix(,nrow = nrow(data),ncol = ncol(data))
if(is.numeric(data[,i])){
M[,i]=data[,i]
colnames(M[,i])=names(data)[i]
}
if(is.factor(data[,i])){
M[,i]=data[,i]
colnames(M[,i])=names(data)[i]
}
}
M
}
re_arrange(mtcars)
re_arrange<-function(data)
{
if(!is.data.frame(data))
{
stop("The input should be a data frame object")
}
for(i in 1:ncol(data))
{
M=matrix(,nrow = nrow(data),ncol = ncol(data))
if(is.numeric(data[,i])){
M[,i]=data[,i]
colnames(M)=names(data)[i]
}
if(is.factor(data[,i])){
M[,i]=data[,i]
colnames(M[,i])=names(data)[i]
}
}
M
}
re_arrange(mtcars)
m=mtcars$mpg
m
n=mtcars$cyl
n
c(m,n)
m=matrix()
m[,1]=mtcars$mpg
m[,]=mtcars$mpg
m=mtcars$mpg
n=mtcars$cyl
df=data.frame(m,n)
df
mtcars
df
q=c()
q=c()
for(i in 1:ncol(mtcars))
{
q[i]=mtcars[,i]
}
q
a=c(1,2,3,4)
a
a=matrix(mtcars,nrow = nrow(mtcars),ncol = ncol(mtcars))
a[1,1]
View(a)
View(mtcars)
a[,1]
a[1,1]
a[1,2]
a=matrix(mtcars,nrow = nrow(mtcars),ncol = ncol(mtcars),byrow = FALSE)
a[1,2]
View(a)
nrow(mtcars)
ncol(mtcars)
View(mtcars)
a=matrix(mtcars,nrow = nrow(mtcars),ncol = ncol(mtcars))
p=matrix(c(1,2,3,4),nrow = 2,ncol = 2)
p
m=mtcars$mpg
m
n=mtcars$cyl
n
df=data.frame(m,n)
df
m
df1=data.frame(m)
df1
?data.frame
View(mtcars)
for(i in 1:ncol(mtcars))
{
a=mtcars[,i]
df1=data.frame(a)
}
df1
scores
scores <- matrix(c(89,77,69,76,56,47,90,78,81,67,68,75), nrow = 4, ncol = 3)
scores
x<-c(3,5,6,7,8)
for (i in 1:length(x)) {
print(x[i])
}
for (i in 1:ncol(Boston)) {
avg[i]=mean(Boston[,i])
}
library(MASS)
data("Boston")
avg=numeric()##numeric empty vector
for (i in names(Boston)) {
avg[i]=mean(Boston[,i])
}
avg=matrix(avg)
View(avg)
a=matrix(mtcars,nrow = nrow(mtcars),ncol = ncol(mtcars))
b=mtcars[,i]
for(i in 1:ncol(mtcars))
{
a=matrix(mtcars,nrow = nrow(mtcars),ncol = ncol(mtcars))
b=mtcars[,i]
a[1:nrow(mtcars),i]=b
}
a
View(a)
a=matrix(mtcars,nrow = nrow(mtcars),ncol = ncol(mtcars),byrow = False)
for(i in 1:ncol(mtcars))
{
a=matrix(mtcars,nrow = nrow(mtcars),ncol = ncol(mtcars),byrow = False)
b=mtcars[,i]
a[1:nrow(mtcars),i]=b
}
for(i in 1:ncol(mtcars))
{
a=matrix(mtcars,nrow = nrow(mtcars),ncol = ncol(mtcars),byrow = FALSE)
b=mtcars[,i]
a[1:nrow(mtcars),i]=b
}
View(a)
m=matrix(c(1,2,3,4,5,6),nrow = 3,ncol = 2)
m
View(as.matrix(a))
apply(mtcars[,1],MARGIN = 2,is.numeric())
apply(mtcars[,1],MARGIN = 2,is.numeric(mtcars[,1]))
a=c(mtcars[,1])
a
a=c(mtcars[,2)
a=c(mtcars[,2])
a
for(i in 1:ncol(mtcars))
{
a=c(mtcars[,i])
df1=data.frame(a)
}
df1
View(df1)
a=c(mtcars[,1])
a=c(mtcars[,1])
for(i in 2:ncol(mtcars))
{
b=mtcars[i]
df1=data.frame(a,b)
}
View(df1)
a1=c(mtcars[,1])
for(i in 2:ncol(mtcars))
{
b1=mtcars[i]
df1=data.frame(a1,b1)
}
View(df1)
names(mtcars)
names(mtcars)[1]
mtcars[is.numeric(mtcars)]
mtcars[is.numeric(mtcars),]
mtcars[is.numeric(mtcars),is.numeric(mtcars)]
king=scan(""http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3")
king=scan("http://robjhyndman.com/tsdldata/misc/kings.dat",skip=3)
king
king_ts=ts(king)
king_ts
plot(king_ts)
plot(king_ts)
births=scan("http://robjhyndman.com/tsdldata/data/nybirths.dat")
b_ts=ts(births,frequency = 12,start = c(1946,1))
b_ts
plot(b_ts)
b_ts
library(caret)
install.packages(caret)
library(caret)
library(caret)
install.packages("caret")
# Reading Data, we are using Airpassenger dataset to perform ARIMA MOdel.
data(AirPassengers)
AirPassengers -> AirPassengers
plot(AirPassengers)
plot(AirPassengers)
#install.packages("forecast")
library(forecast)
#install.packages("forecast")
install.packages("forecast")
data(AirPassengers)
library(forecast)
data(AirPassengers)
#Checking Class of data
class(AirPassengers)
# Start date of time series.
start(AirPassengers)
# End date of time series.
end(AirPassengers)
# Checking frequency  of ts data
frequency(AirPassengers)
# checking for missing value in data.
sum(is.na(AirPassengers))
# Checking data distribution
summary(AirPassengers)
tsdata<- ts(AirPassengers, frequency = 12)
# ploting ts to check trend, seasonality
plot(tsdata)
# Decompose the Time series to check "trend , seasonality, random factor,
# we can see there is Multiplicative type of seasonality, as variance is increasing with time
ddata<- decompose(tsdata, "multiplicative")
#ploting decompose data at once
plot(ddata)
# plot only for trend,  we can see an upward trend, so detreanding/demean is needed.
plot(ddata$trend)
# plot only for random factor,
plot(ddata$random)
# plot only for seasonality, there is seasonality with frquency 12, that need to be consider, lag order need to be cal.
plot(ddata$seasonal)
#-------------------------------------------------------
# #abline regress time series data to plot level/average
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
cycle(AirPassengers)
#side by side Boxplot by cycle for each month, it shows 7-8 month there is jump/hike in passenger traffic.
boxplot(AirPassengers~cycle(AirPassengers, xlab="Date"))
#Stationarity
plot(AirPassengers)
#Ask R for the best model
mymodel<- auto.arima(AirPassengers)
#Ask R for the best model
mymodel<- auto.arima(AirPassengers)
mymodel
getwd()
setwd()
setwd('C:\\Users\\ASUS\\Desktop\\R_Sessions')
library(ggplot2)
car=read.csv('cars.csv')
View(car)
###Histogram
##Creating an empty canvas
ggplot(aes(MPG),data = car)
##Simple histogram
ggplot(aes(MPG),data = car) +geom_histogram()
#binwidth argument
ggplot(aes(MPG),data = car) +geom_histogram(binwidth = 10)
##
plt=ggplot(aes(MPG),data = car)
plt+geom_histogram(binwidth = 10)
##Relative Frequency
plt+geom_histogram(aes(y=..density..),bins = 10)
##Relative Frequency
plt+geom_histogram(aes(y= ..density..),bins = 10)
+ggtitle("Histogram of MPG")
###Adding Axis labels
plt+geom_histogram(binwidth = 10)+xlab('Miles per gallon')+ylab("Number of cars")+ggtitle("Histogram of MPG")
plt+geom_histogram(binwidth = 10)
+xlab('Miles per gallon')+ylab("Number of cars")
+ggtitle("Histogram of MPG",subtitle = "Date 18th August")
+ggtitle("Histogram of MPG",subtitle = "Date 18th August")
plt+geom_histogram(binwidth = 10)+xlab('Miles per gallon')+ylab("Number of cars")+ggtitle("Histogram of MPG",subtitle = "Date 18th August")
plt+geom_histogram(binwidth = 10)+xlab('Miles per gallon')+ylab("Number of cars")+ggtitle("Histogram of\n MPG")
plt+geom_histogram(binwidth = 10)+scale_x_continuous(name = "Miles per gallon",breaks = seq(0,50,5))
plt+geom_histogram(binwidth = 10)+scale_x_continuous(name = "Miles per gallon",breaks = seq(0,50,5),limits = c(0,50))
#Changing colors
plt+geom_histogram(fill="yellow" binwidth = 10)
#Changing colors
plt+geom_histogram(fill="yellow", binwidth = 10)
#Changing colors
plt+geom_histogram(fill="blue", binwidth = 10)
#Changing colors
plt+geom_histogram(fill="light blue", binwidth = 10)
plt+geom_histogram(fill="light blue",color="black", binwidth = 10)
plt+geom_histogram(aes(fill=..count..), binwidth = 10)
plt+geom_histogram(aes(fill=..count..), binwidth = 10)+scale_fill_gradient("Count",low = "orange",high = "red")
###Using themes
plt+geom_histogram(aes(fill=..count..), binwidth = 10)+scale_fill_gradient("Count",low = "orange",high = "red")+theme()
###Using themes
plt+geom_histogram(aes(fill=..count..), binwidth = 10)+scale_fill_gradient("Count",low = "orange",high = "red")+theme_classic()
plt+geom_histogram(aes(fill=..count..), binwidth = 10)+scale_fill_gradient("Count",low = "orange",high = "red")+theme_minimal()
plt+geom_histogram(aes(fill=..count..), binwidth = 10)+scale_fill_gradient("Count",low = "black",high = "green")+theme_minimal()
plt+geom_histogram(aes(fill=..count..), binwidth = 10)+scale_fill_gradient("Count",low = "black",high = "green")+theme_light()
plt+geom_histogram(aes(fill=..count..), binwidth = 10)+scale_fill_gradient("Count",low = "black",high = "green")+theme_dark()
###Multiple Histograms
plt+geom_histogram(aes(fill=..count..), binwidth = 10)+scale_fill_gradient("Count",low = "orange",high = "red")+facet_wrap(~Cylinders,nrow = 2)
plt+geom_histogram(aes(fill=..count..), binwidth = 10)+scale_fill_gradient("Count",low = "orange",high = "red")+facet_wrap(c("Cylinders","Origin"),nrow = 2)
