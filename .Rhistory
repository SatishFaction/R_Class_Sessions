a[1,1]
View(a)
View(mtcars)
a[,1]
a[1,1]
a[1,2]
a=matrix(mtcars,nrow = nrow(mtcars),ncol = ncol(mtcars),byrow = FALSE)
a[1,2]
View(a)
nrow(mtcars)
ncol(mtcars)
View(mtcars)
a=matrix(mtcars,nrow = nrow(mtcars),ncol = ncol(mtcars))
p=matrix(c(1,2,3,4),nrow = 2,ncol = 2)
p
m=mtcars$mpg
m
n=mtcars$cyl
n
df=data.frame(m,n)
df
m
df1=data.frame(m)
df1
?data.frame
View(mtcars)
for(i in 1:ncol(mtcars))
{
a=mtcars[,i]
df1=data.frame(a)
}
df1
scores
scores <- matrix(c(89,77,69,76,56,47,90,78,81,67,68,75), nrow = 4, ncol = 3)
scores
x<-c(3,5,6,7,8)
for (i in 1:length(x)) {
print(x[i])
}
for (i in 1:ncol(Boston)) {
avg[i]=mean(Boston[,i])
}
library(MASS)
data("Boston")
avg=numeric()##numeric empty vector
for (i in names(Boston)) {
avg[i]=mean(Boston[,i])
}
avg=matrix(avg)
View(avg)
a=matrix(mtcars,nrow = nrow(mtcars),ncol = ncol(mtcars))
b=mtcars[,i]
for(i in 1:ncol(mtcars))
{
a=matrix(mtcars,nrow = nrow(mtcars),ncol = ncol(mtcars))
b=mtcars[,i]
a[1:nrow(mtcars),i]=b
}
a
View(a)
a=matrix(mtcars,nrow = nrow(mtcars),ncol = ncol(mtcars),byrow = False)
for(i in 1:ncol(mtcars))
{
a=matrix(mtcars,nrow = nrow(mtcars),ncol = ncol(mtcars),byrow = False)
b=mtcars[,i]
a[1:nrow(mtcars),i]=b
}
for(i in 1:ncol(mtcars))
{
a=matrix(mtcars,nrow = nrow(mtcars),ncol = ncol(mtcars),byrow = FALSE)
b=mtcars[,i]
a[1:nrow(mtcars),i]=b
}
View(a)
m=matrix(c(1,2,3,4,5,6),nrow = 3,ncol = 2)
m
View(as.matrix(a))
apply(mtcars[,1],MARGIN = 2,is.numeric())
apply(mtcars[,1],MARGIN = 2,is.numeric(mtcars[,1]))
a=c(mtcars[,1])
a
a=c(mtcars[,2)
a=c(mtcars[,2])
a
for(i in 1:ncol(mtcars))
{
a=c(mtcars[,i])
df1=data.frame(a)
}
df1
View(df1)
a=c(mtcars[,1])
a=c(mtcars[,1])
for(i in 2:ncol(mtcars))
{
b=mtcars[i]
df1=data.frame(a,b)
}
View(df1)
a1=c(mtcars[,1])
for(i in 2:ncol(mtcars))
{
b1=mtcars[i]
df1=data.frame(a1,b1)
}
View(df1)
names(mtcars)
names(mtcars)[1]
mtcars[is.numeric(mtcars)]
mtcars[is.numeric(mtcars),]
mtcars[is.numeric(mtcars),is.numeric(mtcars)]
################ Ttest for data set###########################################
Ttest<-function(data,x=c(),y=c())
{
t=c()
for(i in x)
{
if(is.numeric(data[,i])&is.factor(data[,y]))
{
t=t.test(data[,i],data[,y])
print(t$p.value)
}
else
{
print("Ttest not possible --Either target not categorical or x not numeric")
}
}
}
Ttest(f,c(11),c(16))
setwd("C:\\Users\\ASUS\\Desktop\\R_Sessions")
car=read.csv("cars.csv")
f=read.csv("framingham.csv")
i=read.csv("IBM.csv")
Ttest(f,c(11),c(16))
re_arrange<-function(data)
{
a=c()
b=c()
for(i in 1:ncol(data))
{
if(length(unique(data[,i]))<=5)
{
f[,i]=as.factor(data[,i])
}
a[i]=is.numeric(data[,i])
b[i]=is.factor(data[,i])
}
a
da=data[,a]
db=data[,b]
#dd=data.frame(da,db)
View(da)
View(db)
}
re_arrange(car)
re_arrange<-function(data)
{
a=c()
b=c()
for(i in 1:ncol(data))
{
a[i]=is.numeric(data[,i])
b[i]=is.factor(data[,i])
}
a
da=data[,a]
db=data[,b]
#dd=data.frame(da,db)
View(da)
View(db)
}
re_arrange(car)
re_arrange<-function(data)
{
a=c()
b=c()
for(i in 1:ncol(data))
{
a[i]=is.numeric(data[,i])
b[i]=is.factor(data[,i])
}
a
da=data[,a]
db=data[,b]
dd=data.frame(da,db)
View(dd)
}
re_arrange(car)
re_arrange(f)
re_arrange(i)
re_arrange<-function(data)
{
a=c()
b=c()
for(i in 1:ncol(data))
{
if(length(unique(data[,i]))==2)
{
data[,i]=as.factor(data[,i])
}
a[i]=is.numeric(data[,i])
b[i]=is.factor(data[,i])
}
a
da=data[,a]
db=data[,b]
dd=data.frame(da,db)
View(dd)
}
re_arrange(f)
f.shape
dim(f)
re_arrange(i)
################# Ttest for data set###########################################
Ttest<-function(data,x=c(),y=c())
{
t=c()
for(i in x)
{
if(is.numeric(data[,i])&is.factor(data[,y]))
{
t=t.test(data[,i],data[,y])
print(t$p.value)
}
else
{
print("Ttest not possible --Either target not categorical or x not numeric")
}
}
}
Ttest(f,c(11),c(16))
f[,is.na()]
f[,is.na(f)]
f[, !colSums(is.na(f)), drop = FALSE]
f1=f[, !colSums(is.na(f)), drop = FALSE]
View(f1)
summary(f1)
f[is.na()]
f[is.na(f)]
f[,complete.cases(f)]
View(f1)
dim(f)
!colSums(is.na(f))
f2=f[,colSums(is.na(f)), drop = FALSE]
[,colSums(is.na(f)), drop = FALSE]
f[,colSums(is.na(f)),drop=FALSE ]
f[,colSums(!is.na(f)),drop=FALSE ]
f2=f[,colSums(!is.na(f)),drop=FALSE ]
f2=f[,!colSums(!is.na(f)),drop=FALSE ]
View(f2)
f2=f[,!colSums(!is.na(f)),drop=FALSE ]
View(f2)
new.df <- f[, colSums(is.na(f)) == 0 ]
View(new.df)
?unique()
summary(f)
unique(f$glucose,na.rm=T)
length(unique(f$glucose,na.rm=T))
length(unique(f$glucose))
length(unique(f$glucose,na.rm=T))
f$glucose[is.na(f$glucose)]
length(f$glucose[is.na(f$glucose)])
dim(f)
f[f$glucose[!is.na(f$glucose)]]
f[,f$glucose[!is.na(f$glucose)]]
f$glucose[!is.na(f$glucose)]
a=f$glucose[!is.na(f$glucose)]
View(a)
x=c(1,1,NA)
y=c(21,11,NA)
length(unique(x))
length(unique(y))
y=c(21,11,NA,NA)
length(unique(y))
re_arrange<-function(data)
{
a=c()
b=c()
for(i in 1:ncol(data))
{
if(length(unique(data[,i]))<=3)
{
data[,i]=as.factor(data[,i])
}
a[i]=is.numeric(data[,i])
b[i]=is.factor(data[,i])
}
a
da=data[,a]
db=data[,b]
dd=data.frame(da,db)
View(dd)
}
re_arrange(f)
re_arrange<-function(data)
{
a=c()
b=c()
for(i in 1:ncol(data))
{
if(length(unique(data[,i]))<=10)
{
data[,i]=as.factor(data[,i])
}
a[i]=is.numeric(data[,i])
b[i]=is.factor(data[,i])
}
a
da=data[,a]
db=data[,b]
dd=data.frame(da,db)
View(dd)
}
re_arrange(f)
re_arrange<-function(data)
{
a=c()
b=c()
for(i in 1:ncol(data))
{
if(length(unique(data[,i]))<=10)
{
data[,i]=as.factor(data[,i])
}
a[i]=is.numeric(data[,i])
b[i]=is.factor(data[,i])
}
a
da=data[,a]
db=data[,b]
dd=data.frame(da,db)
View(dd)
}
re_arrange(i)
re_arrange<-function(data)
{
a=c()
b=c()
for(i in 1:ncol(data))
{
if(length(unique(data[,i]))<=5)
{
data[,i]=as.factor(data[,i])
}
a[i]=is.numeric(data[,i])
b[i]=is.factor(data[,i])
}
a
da=data[,a]
db=data[,b]
dd=data.frame(da,db)
View(dd)
}
re_arrange(f)
Ttest<-function(data,x=c(),y=c())
{
t=c()
for(i in x)
{
if(is.numeric(data[,i])&is.factor(data[,y]))
{
t=t.test(data[,i],data[,y])
print(t$p.value)
}
else
{
print("Ttest not possible --Either target not categorical or x not numeric")
}
}
}
Ttest(f,c(11),c(16))
View(f[,16])
Ttest(f,c(11),c(16))
Ttest<-function(data,x=c(),y=c())
{
t=c()
for(i in x)
{
if(length(unique(data[,i]))<=5)
{
data[,i]=as.factor(data[,i])
}
if(is.numeric(data[,i])&is.factor(data[,y]))
{
t=t.test(data[,i],data[,y])
print(t$p.value)
}
else
{
print("Ttest not possible --Either target not categorical or x not numeric")
}
}
}
Ttest(f,c(11),c(16))
Ttest(f,c(11),c(16))
Ttest<-function(data,x=c(),y=c())
{
t=c()
for(i in x)
{
if(length(unique(data[,i]))<=5)
{
data[,i]=as.factor(data[,i])
}
if(is.numeric(data[,i])&is.factor(data[,y]))
{
t=t.test(data[,i],data[,y])
print(t$p.value)
}
else
{
print("Ttest not possible --Either target not categorical or x not numeric")
}
}
}
Ttest(f,c(11),c(16))
Ttest<-function(data,x=c(),y=c())
{
t=c()
for(i in x)
{
if(is.numeric(data[,i])&is.factor(data[,y]))
{
t=t.test(data[,i],data[,y])
print(t$p.value)
}
else
{
print("Ttest not possible --Either target not categorical or x not numeric")
}
}
}
Ttest(f,c(11),c(16))
setwd("C:\\Users\\ASUS\\Desktop\\R_Sessions")
car=read.csv("cars.csv")
f=read.csv("framingham.csv")
i=read.csv("IBM.csv")
View(car)
Ttest(car,c(6),c(9))
Ttest<-function(data,x=c(),y=c())
{
t=c()
for(i in x)
{
if(is.numeric(data[,i])&is.factor(data[,y]))
{
t=t.test(data[,i],data[,y])
print(t$p.value)
}
}
}
Ttest(car,c(6),c(9))
Ttest(f,c(6),c(16))
Ttest<-function(data,x=c(),y=c())
{
t=c()
for(i in x)
{
t=t.test(data[,i],data[,y])
print(t$p.value)
}
}
Ttest(f,c(6),c(16))
Ttest(f,c(6),c(12))
Ttest(f,c(6),c(1))
Ttest(f,c(1),c(1))
chisq.test(f$male,f$TenYearCHD)
c=chisq.test(f$male,f$TenYearCHD)
c$p.value
chi_test<-function(data,x=c(),y=c())
{
t=chi()
for(i in x)
{
chi=chisq.test(data[,i],data[,y])
print(chi$p.value)
}
}
chi_test(f,c(1),c(16))
chi_test(f,c(1),c(16))
hi_test<-function(data,x=c(),y=c())
{
t=chi()
for(i in x)
{
chi=chisq.test(data[,i],data[,y])
print(chi$p.value)
}
}
chi_test(f,c(1),c(16))
chi_test<-function(data,x=c(),y=c())
{
chi=c()
for(i in x)
{
chi=chisq.test(data[,i],data[,y])
print(chi$p.value)
}
}
chi_test(f,c(1),c(16))
chi_test(car,c(1),c(9))
chi_test<-function(data,x=c(),y=c())
{
chi=c()
for(i in x)
{
chi=chisq.test(data[,i],data[,y])
print(chi$p.value)
}
}
chi_test(car,c(1),c(9))
chi_test(car,c(3),c(9))
